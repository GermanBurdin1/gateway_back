import {
  WebSocketGateway,
  WebSocketServer,
  SubscribeMessage,
  OnGatewayConnection,
  OnGatewayDisconnect,
  MessageBody,
  ConnectedSocket,
} from "@nestjs/websockets";
import { Server, Socket } from "socket.io";
import { Logger } from "@nestjs/common";

interface CallData {
  to: string;
  from: string;
  channelName?: string;
}

interface GroupRoom {
  id: string;
  name: string;
  creator: string;
  participants: string[];
  maxParticipants: number;
  createdAt: Date;
}

@WebSocketGateway({
  cors: {
    origin: "http://localhost:4200",
    methods: ["GET", "POST"],
    credentials: true,
  },
})
export class VideoCallGateway
  implements OnGatewayConnection, OnGatewayDisconnect
{
  @WebSocketServer()
  server: Server;

  private readonly logger = new Logger(VideoCallGateway.name);
  private connectedUsers = new Map<string, string>(); // userId -> socketId
  private groupRooms = new Map<string, GroupRoom>(); // roomId -> room

  handleConnection(client: Socket) {
    this.logger.log(`üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${client.id}`);
  }

  handleDisconnect(client: Socket) {
    // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const [userId, socketId] of this.connectedUsers.entries()) {
      if (socketId === client.id) {
        this.connectedUsers.delete(userId);
        this.logger.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª—é—á–µ–Ω`);
        break;
      }
    }
  }

  @SubscribeMessage("register")
  handleRegister(
    @MessageBody() userId: string,
    @ConnectedSocket() client: Socket,
  ) {
    this.connectedUsers.set(userId, client.id);
    this.logger.log(
      `üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å–æ–∫–µ—Ç–æ–º ${client.id}`,
    );

    client.emit("registered", { success: true, userId });
  }

  @SubscribeMessage("call_invite")
  handleCallInvite(
    @MessageBody() data: CallData,
    @ConnectedSocket() client: Socket,
  ) {
    this.logger.log(`üìû –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ –æ—Ç ${data.from} –∫ ${data.to}`);

    const targetSocketId = this.connectedUsers.get(data.to);

    if (targetSocketId) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      this.server.to(targetSocketId).emit("call_invite", {
        from: data.from,
        to: data.to,
        channelName: data.channelName || "lesson_channel",
      });

      this.logger.log(`‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${data.to}`);
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏
      client.emit("call_failed", {
        reason: "user_offline",
        targetUser: data.to,
      });

      this.logger.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.to} –Ω–µ –≤ —Å–µ—Ç–∏`);
    }
  }

  @SubscribeMessage("call_accept")
  handleCallAccept(@MessageBody() data: CallData) {
    this.logger.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.from} –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤ –æ—Ç ${data.to}`);

    const initiatorSocketId = this.connectedUsers.get(data.to);

    if (initiatorSocketId) {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤—ã–∑–æ–≤–∞
      this.server.to(initiatorSocketId).emit("call_accept", {
        from: data.from,
        to: data.to,
        channelName: data.channelName || "lesson_channel",
      });

      this.logger.log(`üì¢ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä ${data.to} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤—ã–∑–æ–≤–∞`);
    }
  }

  @SubscribeMessage("call_reject")
  handleCallReject(@MessageBody() data: CallData) {
    this.logger.log(
      `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.from} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤ –æ—Ç ${data.to}`,
    );

    const initiatorSocketId = this.connectedUsers.get(data.to);

    if (initiatorSocketId) {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã–∑–æ–≤–∞
      this.server.to(initiatorSocketId).emit("call_reject", {
        from: data.from,
        to: data.to,
        reason: "user_declined",
      });

      this.logger.log(`üì¢ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä ${data.to} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã–∑–æ–≤–∞`);
    }
  }

  @SubscribeMessage("call_end")
  handleCallEnd(@MessageBody() data: CallData) {
    this.logger.log(`üî¥ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –º–µ–∂–¥—É ${data.from} –∏ ${data.to}`);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
    const targetSocketId = this.connectedUsers.get(data.to);
    const fromSocketId = this.connectedUsers.get(data.from);

    if (targetSocketId) {
      this.server.to(targetSocketId).emit("call_ended", { from: data.from });
    }

    if (fromSocketId) {
      this.server.to(fromSocketId).emit("call_ended", { from: data.to });
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏)
  @SubscribeMessage("get_online_users")
  handleGetOnlineUsers(@ConnectedSocket() client: Socket) {
    const onlineUsers = Array.from(this.connectedUsers.keys());
    client.emit("online_users", onlineUsers);

    this.logger.log(
      `üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${onlineUsers.length} —á–µ–ª–æ–≤–µ–∫`,
    );
  }

  // === –ì–†–£–ü–ü–û–í–´–ï –ö–û–ù–§–ï–†–ï–ù–¶–ò–ò ===

  @SubscribeMessage("room_created")
  handleRoomCreated(@MessageBody() data: { room: GroupRoom; creator: string }) {
    this.logger.log(
      `üè´ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: ${data.room.name} (${data.room.id}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${data.creator}`,
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—É
    this.groupRooms.set(data.room.id, data.room);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
    this.server.emit("room_created", { room: data.room });

    this.logger.log(
      `üíæ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç: ${this.groupRooms.size}`,
    );
  }

  @SubscribeMessage("join_room_request")
  handleJoinRoomRequest(
    @MessageBody() data: { roomId: string; userId: string; userName: string },
    @ConnectedSocket() client: Socket,
  ) {
    this.logger.log(
      `üö™ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ ${data.roomId} –æ—Ç ${data.userId}`,
    );

    const room = this.groupRooms.get(data.roomId);

    if (!room) {
      client.emit("room_join_failed", { reason: "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      this.logger.warn(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ ${data.roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }

    if (room.participants.length >= room.maxParticipants) {
      client.emit("room_join_failed", { reason: "–ö–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞" });
      this.logger.warn(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ ${data.roomId} –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞`);
      return;
    }

    if (room.participants.includes(data.userId)) {
      client.emit("room_join_failed", { reason: "–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ" });
      this.logger.warn(
        `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.userId} —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ ${data.roomId}`,
      );
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    room.participants.push(data.userId);
    this.groupRooms.set(data.roomId, room);

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    client.emit("room_joined", { room });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    room.participants.forEach((participantId) => {
      if (participantId !== data.userId) {
        const participantSocketId = this.connectedUsers.get(participantId);
        if (participantSocketId) {
          this.server.to(participantSocketId).emit("room_participant_joined", {
            participant: data.userId,
            participantName: data.userName,
          });
        }
      }
    });

    this.logger.log(
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${data.roomId}. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${room.participants.length}`,
    );
  }

  @SubscribeMessage("leave_room")
  handleLeaveRoom(@MessageBody() data: { roomId: string; userId: string }) {
    this.logger.log(
      `üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.userId} –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É ${data.roomId}`,
    );

    const room = this.groupRooms.get(data.roomId);
    if (!room) return;

    // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    room.participants = room.participants.filter((p) => p !== data.userId);

    // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞ - —É–¥–∞–ª—è–µ–º –µ—ë
    if (room.participants.length === 0) {
      this.groupRooms.delete(data.roomId);
      this.logger.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ ${data.roomId} —É–¥–∞–ª–µ–Ω–∞ (–ø—É—Å—Ç–∞—è)`);
    } else {
      this.groupRooms.set(data.roomId, room);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      room.participants.forEach((participantId) => {
        const participantSocketId = this.connectedUsers.get(participantId);
        if (participantSocketId) {
          this.server.to(participantSocketId).emit("room_participant_left", {
            participant: data.userId,
          });
        }
      });
    }

    this.logger.log(
      `üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.userId} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${data.roomId}`,
    );
  }

  @SubscribeMessage("room_closed")
  handleRoomClosed(@MessageBody() data: { roomId: string; creator: string }) {
    this.logger.log(
      `üî¥ –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–º–Ω–∞—Ç—ã ${data.roomId} —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º ${data.creator}`,
    );

    const room = this.groupRooms.get(data.roomId);
    if (!room) return;

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
    room.participants.forEach((participantId) => {
      const participantSocketId = this.connectedUsers.get(participantId);
      if (participantSocketId) {
        this.server
          .to(participantSocketId)
          .emit("room_closed", { roomId: data.roomId });
      }
    });

    // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
    this.groupRooms.delete(data.roomId);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
    this.broadcastAvailableRooms();

    this.logger.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ ${data.roomId} –∑–∞–∫—Ä—ã—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∞`);
  }

  @SubscribeMessage("get_available_rooms")
  handleGetAvailableRooms(@ConnectedSocket() client: Socket) {
    const availableRooms = Array.from(this.groupRooms.values())
      .filter((room) => room.participants.length < room.maxParticipants)
      .map((room) => ({
        id: room.id,
        name: room.name,
        participants: room.participants.length,
        creator: room.creator,
      }));

    client.emit("available_rooms", { rooms: availableRooms });

    this.logger.log(
      `üìã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç: ${availableRooms.length} –∫–æ–º–Ω–∞—Ç`,
    );
  }

  private broadcastAvailableRooms() {
    const availableRooms = Array.from(this.groupRooms.values())
      .filter((room) => room.participants.length < room.maxParticipants)
      .map((room) => ({
        id: room.id,
        name: room.name,
        participants: room.participants.length,
        creator: room.creator,
      }));

    this.server.emit("available_rooms", { rooms: availableRooms });
    this.logger.log(
      `üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`,
    );
  }

  // === –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø –í –ì–†–£–ü–ü–û–í–´–ï –ö–û–ú–ù–ê–¢–´ ===

  @SubscribeMessage("invite_to_room")
  handleInviteToRoom(
    @MessageBody()
    data: {
      roomId: string;
      invitedUserId: string;
      inviterUserId: string;
      inviterName: string;
      roomName: string;
    },
    @ConnectedSocket() client: Socket,
  ) {
    this.logger.log(
      `üìß –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É ${data.roomId}: ${data.inviterUserId} ‚Üí ${data.invitedUserId}`,
    );

    const room = this.groupRooms.get(data.roomId);
    if (!room) {
      client.emit("invite_failed", { reason: "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      return;
    }

    if (room.participants.length >= room.maxParticipants) {
      client.emit("invite_failed", { reason: "–ö–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞" });
      return;
    }

    if (room.participants.includes(data.invitedUserId)) {
      client.emit("invite_failed", { reason: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ" });
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const invitedSocketId = this.connectedUsers.get(data.invitedUserId);
    if (invitedSocketId) {
      this.server.to(invitedSocketId).emit("room_invitation", {
        roomId: data.roomId,
        roomName: data.roomName,
        inviterUserId: data.inviterUserId,
        inviterName: data.inviterName,
      });

      this.logger.log(
        `‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${data.invitedUserId}`,
      );
    } else {
      client.emit("invite_failed", { reason: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏" });
      this.logger.warn(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.invitedUserId} –Ω–µ –≤ —Å–µ—Ç–∏`);
    }
  }

  @SubscribeMessage("invitation_declined")
  handleInvitationDeclined(
    @MessageBody()
    data: {
      roomId: string;
      inviterUserId: string;
      declinedUserId: string;
    },
  ) {
    this.logger.log(
      `‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${data.declinedUserId} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç ${data.inviterUserId}`,
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    const inviterSocketId = this.connectedUsers.get(data.inviterUserId);
    if (inviterSocketId) {
      this.server.to(inviterSocketId).emit("invitation_declined", {
        roomId: data.roomId,
        declinedUserId: data.declinedUserId,
      });
    }
  }

  // === –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø –í –ö–õ–ê–°–°–´ ===

  @SubscribeMessage("class_invite")
  async handleClassInvite(
    @MessageBody()
    data: {
      to: string;
      from: string;
      classData: {
        id: string;
        name: string;
        level: string;
        description: string;
        teacherName: string;
      };
    },
    @ConnectedSocket() client: Socket,
  ) {
    this.logger.log(
      `üìö –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å "${data.classData.name}": ${data.from} ‚Üí ${data.to}`,
    );

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ auth-service
    let teacherName = data.classData.teacherName;
    try {
      // TODO: –î–æ–±–∞–≤–∏—Ç—å AuthClient –≤ WebSocket gateway –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏–º—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
      this.logger.log(`[WebSocketGateway] Using teacher name: ${teacherName}`);
    } catch (error) {
      this.logger.warn(`[WebSocketGateway] Error getting teacher name: ${error.message}`);
      teacherName = 'Professeur';
    }

    const targetSocketId = this.connectedUsers.get(data.to);

    if (targetSocketId) {
      this.server.to(targetSocketId).emit("class_invitation", {
        classId: data.classData.id,
        className: data.classData.name,
        classLevel: data.classData.level,
        classDescription: data.classData.description,
        teacherId: data.from,
        teacherName: teacherName,
      });

      this.logger.log(`‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${data.to}`);
    } else {
      client.emit("class_invite_failed", {
        reason: "user_offline",
        targetUser: data.to,
      });

      this.logger.warn(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.to} –Ω–µ –≤ —Å–µ—Ç–∏`);
    }
  }

  @SubscribeMessage("class_accept")
  handleClassAccept(
    @MessageBody()
    data: {
      to: string;
      from: string;
      classId: string;
    },
    @ConnectedSocket() client: Socket,
  ) {
    this.logger.log(
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.from} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å ${data.classId}`,
    );

    const teacherSocketId = this.connectedUsers.get(data.to);
    if (teacherSocketId) {
      this.server.to(teacherSocketId).emit("class_invitation_accepted", {
        classId: data.classId,
        studentId: data.from,
      });

      this.logger.log(`üì¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å ${data.to} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è`);
    }
  }

  @SubscribeMessage("class_reject")
  handleClassReject(
    @MessageBody()
    data: {
      to: string;
      from: string;
      classId: string;
    },
    @ConnectedSocket() client: Socket,
  ) {
    this.logger.log(
      `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.from} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å ${data.classId}`,
    );

    const teacherSocketId = this.connectedUsers.get(data.to);
    if (teacherSocketId) {
      this.server.to(teacherSocketId).emit("class_invitation_rejected", {
        classId: data.classId,
        studentId: data.from,
      });

      this.logger.log(`üì¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å ${data.to} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è`);
    }
  }

  // === –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø –í –£–†–û–ö–ò ===

  @SubscribeMessage("invite_to_lesson")
  handleInviteToLesson(
    @MessageBody()
    data: {
      classId: string;
      studentIds: string[];
      teacherId: string;
      lessonName: string;
    },
    @ConnectedSocket() client: Socket,
  ) {
    this.logger.log(
      `üìö –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —É—Ä–æ–∫ "${data.lessonName}": ${data.teacherId} ‚Üí ${data.studentIds.join(', ')}`,
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É
    data.studentIds.forEach(studentId => {
      const studentSocketId = this.connectedUsers.get(studentId);
      if (studentSocketId) {
        this.server.to(studentSocketId).emit("lesson_invitation", {
          classId: data.classId,
          lessonName: data.lessonName,
          teacherId: data.teacherId,
          teacherName: "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        });

        this.logger.log(
          `‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —É—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É ${studentId}`,
        );
      } else {
        this.logger.warn(`‚ùå –°—Ç—É–¥–µ–Ω—Ç ${studentId} –Ω–µ –≤ —Å–µ—Ç–∏`);
        client.emit("invite_failed", { 
          reason: `–°—Ç—É–¥–µ–Ω—Ç ${studentId} –Ω–µ –≤ —Å–µ—Ç–∏`,
          studentId: studentId
        });
      }
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    client.emit("lesson_invitations_sent", {
      totalSent: data.studentIds.filter(id => this.connectedUsers.has(id)).length,
      totalFailed: data.studentIds.filter(id => !this.connectedUsers.has(id)).length,
      failedStudents: data.studentIds.filter(id => !this.connectedUsers.has(id))
    });
  }

  @SubscribeMessage("accept_lesson_invitation")
  handleAcceptLessonInvitation(
    @MessageBody()
    data: {
      classId: string;
      teacherId: string;
      studentId: string;
    },
    @ConnectedSocket() client: Socket,
  ) {
    this.logger.log(
      `‚úÖ –°—Ç—É–¥–µ–Ω—Ç ${data.studentId} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —É—Ä–æ–∫ ${data.classId}`,
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const teacherSocketId = this.connectedUsers.get(data.teacherId);
    if (teacherSocketId) {
      this.server.to(teacherSocketId).emit("lesson_invitation_accepted", {
        classId: data.classId,
        studentId: data.studentId,
        studentName: "–°—Ç—É–¥–µ–Ω—Ç", // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      });
    }
  }

  @SubscribeMessage("reject_lesson_invitation")
  handleRejectLessonInvitation(
    @MessageBody()
    data: {
      classId: string;
      teacherId: string;
      studentId: string;
    },
    @ConnectedSocket() client: Socket,
  ) {
    this.logger.log(
      `‚ùå –°—Ç—É–¥–µ–Ω—Ç ${data.studentId} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —É—Ä–æ–∫ ${data.classId}`,
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const teacherSocketId = this.connectedUsers.get(data.teacherId);
    if (teacherSocketId) {
      this.server.to(teacherSocketId).emit("lesson_invitation_rejected", {
        classId: data.classId,
        studentId: data.studentId,
        studentName: "–°—Ç—É–¥–µ–Ω—Ç", // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      });
    }
  }

  @SubscribeMessage("remove_from_room")
  handleRemoveFromRoom(
    @MessageBody()
    data: {
      roomId: string;
      removedUserId: string;
      removerUserId: string;
    },
    @ConnectedSocket() client: Socket,
  ) {
    this.logger.log(
      `üö´ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã ${data.roomId}: ${data.removerUserId} –∏—Å–∫–ª—é—á–∞–µ—Ç ${data.removedUserId}`,
    );

    const room = this.groupRooms.get(data.roomId);
    if (!room) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∞—Ç—å)
    if (room.creator !== data.removerUserId) {
      client.emit("remove_failed", { reason: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" });
      return;
    }

    // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    room.participants = room.participants.filter(
      (p) => p !== data.removedUserId,
    );
    this.groupRooms.set(data.roomId, room);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const removedSocketId = this.connectedUsers.get(data.removedUserId);
    if (removedSocketId) {
      this.server.to(removedSocketId).emit("removed_from_room", {
        roomId: data.roomId,
        removerUserId: data.removerUserId,
      });
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
    room.participants.forEach((participantId) => {
      const participantSocketId = this.connectedUsers.get(participantId);
      if (participantSocketId) {
        this.server.to(participantSocketId).emit("room_participant_left", {
          participant: data.removedUserId,
        });
      }
    });

    this.logger.log(
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.removedUserId} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã ${data.roomId}`,
    );
  }
}
